package hr.apartmentmanager.web.web;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import hr.apartmentmanager.enumerations.ReservationStatus;
import hr.apartmentmanager.web.model.Apartment;
import hr.apartmentmanager.web.model.Reservation;
import hr.apartmentmanager.web.model.Tourists;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ReservationRepository reservationRepository;
	
	@Autowired
	private ApartmentRepository apartmentRepository;
	
	@Autowired
	private TouristsRepository touristsRepository;
	

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewReservation(@RequestParam int reservationId, @RequestParam LocalDate checkInDate,
			@RequestParam LocalDate checkOutDate, @RequestParam double pricePerNight, @RequestParam double totalPrice,
			@RequestParam String confirmed, @RequestParam double advancedPayment, @RequestParam String advPayCurrency) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		ReservationStatus status = ReservationStatus.reservation;
		Reservation reservation = new Reservation(reservationId, checkInDate, checkOutDate, pricePerNight, totalPrice,
				advancedPayment, advPayCurrency, status);
		reservationRepository.save(reservation);
		return "Saved";
	}
	
	@GetMapping(path = "/all-apartments")
	public @ResponseBody Iterable<Apartment> getAllApartments() {
		// This returns a JSON or XML with the users
		return apartmentRepository.findAll();
	}
	
	
	@PostMapping(path = "/reservation")
	public RedirectView  getReservation(
			@RequestParam("name") String touristsName,
			@RequestParam("apartmentName") String apartmentName,
			@RequestParam("checkInDate") String checkInDate,
			@RequestParam("persons") String numberOfPersons,
			@RequestParam("checkOutDate") String checkOutDate,
			@RequestParam("adults") String numberOfAdults,
			@RequestParam("pricePerNight") String pricePerNight,
			@RequestParam("children") String numberOfChildren,
			@RequestParam(name = "advancedPaymentPaid", required = false) String advancedPaymentPaid,
			@RequestParam("advancedPaymentCurrency") String advancedPaymentCurrency,
			@RequestParam("city") String city,
			@RequestParam("advancedPaymentAmount") String advancedPaymentAmount,
			@RequestParam("country") String country,
			@RequestParam("totalPrice") String totalPrice,
			@RequestParam("email") String email,
			@RequestParam("phone") String phone,
			@RequestParam(name = "pets", required = false) String pets,
			@RequestParam("notes") String notes
			) {
		
		
		if(advancedPaymentPaid==null)
			advancedPaymentPaid="no";
		if(pets==null)
			pets="no";
		boolean petsBool = pets.equals("no") ? false : true;
		
		System.out.println(touristsName
				+ checkInDate.toString() 
				+ advancedPaymentPaid 
				+ advancedPaymentAmount
				+ " " + apartmentName);
		System.out.println();
		//Tourists tourists = touristsRepository.findById(Long.valueOf(40)).get();
		Tourists tourists = new Tourists(touristsName, country, city,
				Integer.valueOf(numberOfAdults), Integer.valueOf(numberOfChildren)
				, Integer.valueOf(numberOfPersons), email, phone, petsBool, notes);
		System.out.println(tourists.getTouristsId());
		
		//touristsRepository.save(tourists);
		
		//tourists.setTouristsId(Long.valueOf(42));
		
		/*		
		touristsRepository.save(tourists);
		
		for (Apartment apartment : apartmentRepository.findAll()) {
			if(apartment.getApartmentName().equals(apartmentName)) {
				
				//apartmentRepository.delete(apartment);
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
				System.out.println(apartment.getApartmentId());
				
				System.out.println(tourists);
				System.out.println(apartment);
				
				Reservation reservation = 
						new Reservation(tourists
								, apartment
								, LocalDate.parse(checkInDate, formatter)
								, LocalDate.parse(checkOutDate, formatter)
								//, BigDecimal.valueOf(Double.parseDouble(pricePerNight))
								, new BigDecimal(pricePerNight.replace(".", "").replace(",", "."))
								//, BigDecimal.valueOf(Double.parseDouble(totalPrice))
								, new BigDecimal(totalPrice.replace(".", "").replace(",", "."))
								, ReservationStatus.reservation
								//, BigDecimal.valueOf(Double.parseDouble(advancedPaymentAmount))
								, new BigDecimal(advancedPaymentAmount.replace(".", "").replace(",", "."))
								, advancedPaymentCurrency);
				
				reservation.setReservationId(Long.valueOf(42));
				
				reservationRepository.save(reservation);
				return new RedirectView("reserved-dates");
			}
		}
		*/
		//Reservation reservation = new Reservation(tourists, apartment, checkInDate, checkOutDate, pricePerNight, totalPrice, confirmed, advancedPayment, advPayCurrency)
		return new RedirectView("error");
	}
	
	@GetMapping(path = "/reservation")
	public ModelAndView getReservation(
			@RequestParam(required = true) Long id) {
		
		Optional<Reservation> reservationOpt = reservationRepository.findById(id);

		if(!reservationOpt.isPresent()) {
			return new ModelAndView("not-found");
		}
		
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		String user = (auth == null || auth.getName().equals("anonymousUser")) ?
				"Neregistrirani korisnik" : auth.getName(); 
		
		Reservation reservation = reservationOpt.get();
		ModelAndView mav = new ModelAndView("reservation");
		mav.addObject("user", user);
		mav.addObject("apartments", apartmentRepository.findAll());
		mav.addObject("reservation", reservation);
		return mav;
	}
	
	/*
	
	
	@GetMapping(path = "/logout")
	public RedirectView logout(HttpServletRequest request, HttpServletResponse response) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();  
        if (auth != null){      
           new SecurityContextLogoutHandler().logout(request, response, auth);  
        }  
		return new RedirectView("reserved-dates");
	}

	*/
	
	
	@GetMapping(path = "/login")
	public ModelAndView login() {
		return new ModelAndView("login");
	}
	
	
	@GetMapping(path = "/reserved-dates")
	public ModelAndView getReservedDates(@RequestParam(required = false) Integer month
			, @RequestParam(required = false) Integer year) {
		
		month = (month != null) ? month : Calendar.getInstance().get(Calendar.MONTH);
		year = (year != null) ? year : Calendar.getInstance().get(Calendar.YEAR);
		
		// This returns a JSON or XML with the users
		Set<Apartment> apartments = new LinkedHashSet<>();
		Iterable<Reservation> reservationRepositoryAll = reservationRepository.findAll();
		for(Reservation reservation : reservationRepositoryAll) {
			Apartment apartment;
			if(reservation.getApartment() != null) {
				apartment = reservation.getApartment();
				if(!apartments.contains(apartment)) {
					apartments.add(apartment);
				}
				final Apartment tmp = apartment;
				Optional<Apartment> foundApartment = apartments.stream().filter(other -> other.equals(tmp)).findFirst();
				apartment = foundApartment.get();
				//for(LocalDate date : reservation.getCheckInDate().datesUntil(reservation.getCheckOutDate()).collect(Collectors.toList()))
				for(LocalDate date : getDatesBetweenUsingJava8(reservation.getCheckInDate(), reservation.getCheckOutDate()))
					apartment.getApartmentReservations().put(date, reservation);
			}
		}
		
		LocalDate startOfMonth = LocalDate.of(year, month, 1);
		LocalDate startOfNextMonth = startOfMonth.plusMonths(1);
		
		List<LocalDate> monthToShow = getDatesBetweenUsingJava8(startOfMonth, startOfNextMonth);
		int[] months = {6, 7, 8, 9};
		int currentYear = Calendar.getInstance().get(Calendar.YEAR);
		int[] years = {currentYear-1, currentYear, currentYear+1}; 
		
		
		
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		String user = (auth == null || auth.getName().equals("anonymousUser")) ?
				"Neregistrirani korisnik" : auth.getName(); 

		
		ModelAndView mav = new ModelAndView();
		mav.addObject("user", user);
		mav.addObject("yearsInt", years);
		mav.addObject("monthsInt", months);
		mav.addObject("apartments", apartments);
		mav.addObject("month", monthToShow);
        mav.setViewName("reserved-dates");
		return mav;
	}
	

	@GetMapping(path = "/all-reservations")
	public @ResponseBody Iterable<Reservation> getAllReservatiosn() {
		// This returns a JSON or XML with the users
		return reservationRepository.findAll();
	}
	
	@GetMapping("/apartments")
	public String apart(@RequestParam(name = "name", required = false, defaultValue = "World") String name,
			Model model) {
		for (Apartment apartment : apartmentRepository.findAll()) {
			if(apartment != null)
				System.out.println(apartment.getApartmentName());

		}
		model.addAttribute("name", name);
		return "reservations";
	}
	
	public static List<LocalDate> getDatesBetweenUsingJava8(
			  LocalDate startDate, LocalDate endDate) { 
			  
			    long numOfDaysBetween = ChronoUnit.DAYS.between(startDate, endDate); 
			    return IntStream.iterate(0, i -> i + 1)
			      .limit(numOfDaysBetween)
			      .mapToObj(i -> startDate.plusDays(i))
			      .collect(Collectors.toList()); 
			}

}